# -*- coding: utf-8 -*-
"""KilimoRiziki_Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bv10BP7-YyWJqEGzt9Tv-aPI6kkoY9W-
"""

import streamlit as st
import pandas as pd

population_prediction_df = pd.read_csv("population_prediction.csv", index_col=0)
retail_prediction_df = pd.read_csv("retail_prediction.csv", index_col=0)
Material_input_df = pd.read_csv("material_input.csv", index_col=0)
crop_suitability_df = pd.read_csv("crop_suitability.csv", index_col=0)

def calculate_crop_risks(year, county):
    crop_risks = {}

    # Error handling for county not found
    county_data = population_prediction_df[population_prediction_df["County"] == county]
    if county_data.empty:
        return {"error": "County not found in the population prediction data."}

    # Error handling for population data not available for the year
    percentage_columns = [f"Percentage_{year}" for year in range(2024, 2029)]
    missing_years = [year for year in percentage_columns if year not in county_data.columns]
    if missing_years:
        return {"error": f"Population data not available for the year(s) {', '.join(missing_years)} in {county}."}

    # Retrieve the population percentages for the specified year range
    population_percentages = county_data[percentage_columns].values[0]

    # Placeholder for retail risk calculation
    for crop in ["Maize", "Beans", "Potatoes", "Bananas"]:
        retail_risk = 0
        # Calculate retail risk for each crop and year combination
        retail_data = retail_prediction_df[(retail_prediction_df["Year"] == year) & (retail_prediction_df["Crop"] == crop)]
        if not retail_data.empty:
            retail_percentage = retail_data["Price Percentage"].values[0]
            retail_risk = 100 - retail_percentage

        # Check if the year exists in the index
        if year not in Material_input_df.index:
            print(f"No data available for the year {year}.")
        else:
            previous_year_data = Material_input_df.loc[year - 1]

        # Retrieve material input prices percentages for the specified year
        material_prices = Material_input_df.loc[year]

        # Calculate the percentage change in fuel prices, fertilizer prices, and grains prices
        fuel_change = material_prices['Fuel_prices Percentage'] - previous_year_data['Fuel_prices Percentage']
        fertilizer_change = material_prices['Fertilizer_prices Percentage'] - previous_year_data['Fertilizer_prices Percentage']
        grains_change = material_prices['Grains_prices Percentage'] - previous_year_data['Grains_prices Percentage']

        # Assess the risk based on the direction and magnitude of price changes
        material_input_risk = 0
        if fuel_change > 0:
            material_input_risk += 10  # Higher fuel prices indicate higher risk
        if fertilizer_change > 0:
            material_input_risk += 10  # Higher fertilizer prices indicate higher risk
        if grains_change > 0:
            material_input_risk += 5   # Higher grains prices indicate moderate risk

        # GDP risk calculation
        gdp_risk = 15

        # Placeholder for crop suitability risk calculation
        suitability_risk = 0

        # Calculate crop suitability risk
        if crop in crop_suitability_df["Crop"].values:
            suitability_data = crop_suitability_df[crop_suitability_df["Crop"] == crop]
            suitable_counties = suitability_data.iloc[0]["Suitable_Counties"].split(", ")
            if county not in suitable_counties:
                suitability_risk = 70  # Crop is not suitable for cultivation in the county

        # Combine all risk factors into the final risk assessment
        total_risk = (population_percentages[year - 2024] * 10 + material_input_risk + retail_risk + gdp_risk + suitability_risk) / 5

        crop_risks[crop] = total_risk

    return crop_risks

# Define the main function
def main():
    # Streamlit app title
    st.title("Crop Recommender System")

    # User input for year and county
    year = st.number_input("Enter the year", value=2024)
    county = st.text_input("Enter the county")

    # Calculate risks for four crops
    risks = calculate_crop_risks(year, county)
    if "error" in risks:
        st.error(risks["error"])
    else:
        for crop, risk in risks.items():
            st.write(f"Risk for {crop} in {county} in {year}: {risk}")

# Run the main function
if __name__ == "__main__":
    main()